// SPDX-License-Identifier: MIT
pragma solidity^0.8.0;

//making a voting contract
//1.we want the ability to accept the  praposals and store them
//proposals :their name and number

//2.voters and voting ability 
//keep track of voting 
//check voters are authenticate to vote 

//3.chairperson
//authenticate and deploy contract
contract Ballot {
    //struct is a method to create own datatype
    struct Voter{
        uint vote;
        bool voted;
        uint weight;

    }
    struct Proposal{
        bytes32 name;
        uint voteCount;

    }
    Proposal[] public proposals;

    mapping(address => Voter)public voters;
    address public chairperson;
    constructor(bytes32[] memory proposalNames){
        chairperson = msg.sender;
        voters[chairperson].weight = 1;

        for(uint i = 0 ; i < proposalNames.length; i++){
            proposals.push(Proposal({
                name:proposalNames[i],
                voteCount: 0 
            }));
        }
    }
    //function authenticate votes
    function giveRightToVote(address voter)public {
        require(msg.sender == chairperson,
                'Only the Chairperson can give access to vote');
        require(!voters[voter].voted,
                'the voter has already voted');
        require(voters[voter].weight == 0);   
        voters[voter].weight = 1; 

            
    }
    //function for voting

    function vote(uint proposal) public {
        Voter storage sender = voters[msg.sender];
        require(sender.weight !=0, 'Has no right to vote');
        require(! sender.voted, 'Already voted');
        sender.voted = true;
        sender.vote = proposal;

        proposals[proposal].voteCount = proposals[proposal].voteCount + sender.weight;
        

    }
    //function for sharing the results
    //1.function that shows the winning proposal by integer
    function winningProposal() public view returns (uint winningProposal_){
        uint winningVoteCount = 0;
        for(uint i=0; i < proposals.length; i++){
            if(proposals[i].voteCount > winningVoteCount){
                winningVoteCount = proposals[i].voteCount;
                winningProposal_ = i;

            }
        }

    }
    //2.function that shows by their name
    function winningName() public view returns(bytes32 winningName_){
        winningName_ = proposals[winningProposal()].name;
        
    }

}